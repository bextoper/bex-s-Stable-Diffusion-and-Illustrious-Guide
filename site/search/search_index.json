{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Example: Basic MkDocs project for Read the Docs This example shows the an integration of a basic MkDocs project with Read the Docs. You\\'re encouraged to view it to get inspiration and copy & paste from the files in the source code. If you are using Read the Docs for the first time, have a look at the official Read the Docs Tutorial . \ud83d\udcda docs/ A basic MkDocs project lives in docs/ , it was generated using MkDocs defaults. All the *.md make up sections in the documentation. \u2699\ufe0f .readthedocs.yaml Read the Docs Build configuration is stored in .readthedocs.yaml . \u2699\ufe0f mkdocs.yml A basic MkDocs configuration is stored here, including a few extensions for MkDocs and Markdown. Add your own configurations here, such as extensions and themes. Remember that many extensions and themes require additional Python packages to be installed. \ud83d\udccd docs/requirements.txt and docs/requirements.in Python dependencies are pinned (uses pip-tools ) here. Make sure to add your Python dependencies to requirements.txt or if you choose pip-tools , edit docs/requirements.in and remember to run to run pip-compile docs/requirements.in . \ud83d\udca1 docs/api.md We add our example Python module lumache in order to auto-generate an API reference. To do this, we use the ::: syntax, you can read more in the mkdocstrings documentation . \ud83d\udca1 docs/usage.md We also include some direct links to a function from the API reference, as well as embedding documentation for the example function lumache.get_random_recipe . This functionality is also from the mkdocstrings extension. \ud83d\udca1 lumache.py API docs are generated for this example Python module - they use docstrings directly in the documentation, notice how this shows up in the rendered documentation. We use the Sphinx convention for docstrings, however you are free to edit mkdocs.yml to change this option to google or numpy . \ud83d\udd22 Git tags versioning We use a basic versioning mechanism by adding a git tag for every release of the example project. All releases and their version numbers are visible on example-mkdocs-basic.readthedocs.io . \ud83d\udcdc README.rst Contents of this README.md are visible on Github and included on the documentation index page (Don\\'t Repeat Yourself). \u2049\ufe0f Questions / comments If you have questions related to this example, feel free to can ask them as a Github issue here . Example Project usage This project has a standard MkDocs layout which is built by Read the Docs almost the same way that you would build it locally (on your own laptop!). You can build and view this documentation project locally - we recommend that you activate a local Python virtual environment first : # Install required Python dependencies (MkDocs etc.) pip install -r docs/requirements.txt # Run the mkdocs development server mkdocs serve Using the example in your own project If you are new to Read the Docs, you may want to refer to the Read the Docs User documentation . If you are copying this code in order to get started with your documentation, you need to: place your docs/ folder alongside your Python project. If you are starting a new project, you can adapt the pyproject.toml example configuration. use your existing project repository or create a new repository on Github, GitLab, Bitbucket or another host supported by Read the Docs. copy in mkdocs.yaml , .readthedocs.yml and the docs/ folder into your project. Customize all the files, replacing example contents. Rebuild the documenation locally to see that it works. Finally , register your project on Read the Docs, see Importing Your Documentation . Read the Docs tutorial To get started with Read the Docs, you may also refer to the Read the Docs tutorial . It provides a full walk-through of building an example project similar to the one in this repository. Welcome to Lumache's documentation! Lumache (/lu\\'make/) is a Python library for cooks and food lovers that creates recipes mixing random ingredients. It pulls data from the Open Food Facts database and offers a simple and intuitive API. Check out the usage section for further information, including how to install the project. Note This project is under active development.","title":"Home"},{"location":"#example-basic-mkdocs-project-for-read-the-docs","text":"This example shows the an integration of a basic MkDocs project with Read the Docs. You\\'re encouraged to view it to get inspiration and copy & paste from the files in the source code. If you are using Read the Docs for the first time, have a look at the official Read the Docs Tutorial . \ud83d\udcda docs/ A basic MkDocs project lives in docs/ , it was generated using MkDocs defaults. All the *.md make up sections in the documentation. \u2699\ufe0f .readthedocs.yaml Read the Docs Build configuration is stored in .readthedocs.yaml . \u2699\ufe0f mkdocs.yml A basic MkDocs configuration is stored here, including a few extensions for MkDocs and Markdown. Add your own configurations here, such as extensions and themes. Remember that many extensions and themes require additional Python packages to be installed. \ud83d\udccd docs/requirements.txt and docs/requirements.in Python dependencies are pinned (uses pip-tools ) here. Make sure to add your Python dependencies to requirements.txt or if you choose pip-tools , edit docs/requirements.in and remember to run to run pip-compile docs/requirements.in . \ud83d\udca1 docs/api.md We add our example Python module lumache in order to auto-generate an API reference. To do this, we use the ::: syntax, you can read more in the mkdocstrings documentation . \ud83d\udca1 docs/usage.md We also include some direct links to a function from the API reference, as well as embedding documentation for the example function lumache.get_random_recipe . This functionality is also from the mkdocstrings extension. \ud83d\udca1 lumache.py API docs are generated for this example Python module - they use docstrings directly in the documentation, notice how this shows up in the rendered documentation. We use the Sphinx convention for docstrings, however you are free to edit mkdocs.yml to change this option to google or numpy . \ud83d\udd22 Git tags versioning We use a basic versioning mechanism by adding a git tag for every release of the example project. All releases and their version numbers are visible on example-mkdocs-basic.readthedocs.io . \ud83d\udcdc README.rst Contents of this README.md are visible on Github and included on the documentation index page (Don\\'t Repeat Yourself). \u2049\ufe0f Questions / comments If you have questions related to this example, feel free to can ask them as a Github issue here .","title":"Example: Basic MkDocs project for Read the Docs"},{"location":"#example-project-usage","text":"This project has a standard MkDocs layout which is built by Read the Docs almost the same way that you would build it locally (on your own laptop!). You can build and view this documentation project locally - we recommend that you activate a local Python virtual environment first : # Install required Python dependencies (MkDocs etc.) pip install -r docs/requirements.txt # Run the mkdocs development server mkdocs serve","title":"Example Project usage"},{"location":"#using-the-example-in-your-own-project","text":"If you are new to Read the Docs, you may want to refer to the Read the Docs User documentation . If you are copying this code in order to get started with your documentation, you need to: place your docs/ folder alongside your Python project. If you are starting a new project, you can adapt the pyproject.toml example configuration. use your existing project repository or create a new repository on Github, GitLab, Bitbucket or another host supported by Read the Docs. copy in mkdocs.yaml , .readthedocs.yml and the docs/ folder into your project. Customize all the files, replacing example contents. Rebuild the documenation locally to see that it works. Finally , register your project on Read the Docs, see Importing Your Documentation .","title":"Using the example in your own project"},{"location":"#read-the-docs-tutorial","text":"To get started with Read the Docs, you may also refer to the Read the Docs tutorial . It provides a full walk-through of building an example project similar to the one in this repository.","title":"Read the Docs tutorial"},{"location":"#welcome-to-lumaches-documentation","text":"Lumache (/lu\\'make/) is a Python library for cooks and food lovers that creates recipes mixing random ingredients. It pulls data from the Open Food Facts database and offers a simple and intuitive API. Check out the usage section for further information, including how to install the project. Note This project is under active development.","title":"Welcome to Lumache's documentation!"},{"location":"api/","text":"API Reference Lumache - Python library for cooks and food lovers. This is a Python docstring, we can use Markdown syntax here because our API documentation library understands it (mkdocstrings). # Import lumache import lumache # Call its only function get_random_ingredients(kind=[\"cheeses\"]) InvalidKindError Bases: Exception Raised if the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py class InvalidKindError(Exception): \"\"\"Raised if the kind is invalid.\"\"\" pass get_random_ingredients(kind=None) Return a list of random ingredients as strings. Parameters: Name Type Description Default kind list[str] | None Optional \"kind\" of ingredients. None Returns: Type Description list[str] The ingredients list. Raises: Type Description lumache.InvalidKindError If the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py def get_random_ingredients(kind=None): \"\"\" Return a list of random ingredients as strings. :param kind: Optional \"kind\" of ingredients. :type kind: list[str] or None :raise lumache.InvalidKindError: If the kind is invalid. :return: The ingredients list. :rtype: list[str] \"\"\" return [\"shells\", \"gorgonzola\", \"parsley\"]","title":"API Reference"},{"location":"api/#api-reference","text":"Lumache - Python library for cooks and food lovers. This is a Python docstring, we can use Markdown syntax here because our API documentation library understands it (mkdocstrings). # Import lumache import lumache # Call its only function get_random_ingredients(kind=[\"cheeses\"])","title":"API Reference"},{"location":"api/#lumache.InvalidKindError","text":"Bases: Exception Raised if the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py class InvalidKindError(Exception): \"\"\"Raised if the kind is invalid.\"\"\" pass","title":"InvalidKindError"},{"location":"api/#lumache.get_random_ingredients","text":"Return a list of random ingredients as strings. Parameters: Name Type Description Default kind list[str] | None Optional \"kind\" of ingredients. None Returns: Type Description list[str] The ingredients list. Raises: Type Description lumache.InvalidKindError If the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py def get_random_ingredients(kind=None): \"\"\" Return a list of random ingredients as strings. :param kind: Optional \"kind\" of ingredients. :type kind: list[str] or None :raise lumache.InvalidKindError: If the kind is invalid. :return: The ingredients list. :rtype: list[str] \"\"\" return [\"shells\", \"gorgonzola\", \"parsley\"]","title":"get_random_ingredients()"},{"location":"usage/","text":"Usage Installation To use Lumache, first install it using pip: (.venv) $ pip install lumache Creating recipes To retrieve a list of random ingredients, you can use the lumache.get_random_ingredients() function: lumache.get_random_ingredients(kind=None) Return a list of random ingredients as strings. Parameters: Name Type Description Default kind list[str] | None Optional \"kind\" of ingredients. None Returns: Type Description list[str] The ingredients list. Raises: Type Description lumache.InvalidKindError If the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py def get_random_ingredients(kind=None): \"\"\" Return a list of random ingredients as strings. :param kind: Optional \"kind\" of ingredients. :type kind: list[str] or None :raise lumache.InvalidKindError: If the kind is invalid. :return: The ingredients list. :rtype: list[str] \"\"\" return [\"shells\", \"gorgonzola\", \"parsley\"] The kind parameter should be either \"meat\" , \"fish\" , or \"veggies\" . Otherwise, get_random_ingredients will raise an exception lumache.InvalidKindError . For example: >>> import lumache >>> lumache.get_random_ingredients() ['shells', 'gorgonzola', 'parsley']","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#installation","text":"To use Lumache, first install it using pip: (.venv) $ pip install lumache","title":"Installation"},{"location":"usage/#creating-recipes","text":"To retrieve a list of random ingredients, you can use the lumache.get_random_ingredients() function:","title":"Creating recipes"},{"location":"usage/#lumache.get_random_ingredients","text":"Return a list of random ingredients as strings. Parameters: Name Type Description Default kind list[str] | None Optional \"kind\" of ingredients. None Returns: Type Description list[str] The ingredients list. Raises: Type Description lumache.InvalidKindError If the kind is invalid. Source code in example-mkdocs-basic-1.1.0\\lumache.py def get_random_ingredients(kind=None): \"\"\" Return a list of random ingredients as strings. :param kind: Optional \"kind\" of ingredients. :type kind: list[str] or None :raise lumache.InvalidKindError: If the kind is invalid. :return: The ingredients list. :rtype: list[str] \"\"\" return [\"shells\", \"gorgonzola\", \"parsley\"] The kind parameter should be either \"meat\" , \"fish\" , or \"veggies\" . Otherwise, get_random_ingredients will raise an exception lumache.InvalidKindError . For example: >>> import lumache >>> lumache.get_random_ingredients() ['shells', 'gorgonzola', 'parsley']","title":"get_random_ingredients()"}]}